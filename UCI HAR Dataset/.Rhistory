pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
arrange(top_counts,desc(count)) -> top_counts_sorted
View(top_counts)
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
arrange(top_unique,desc(unique)) -> top_unique_sorted
View(top_unique_sorted)
submit()
submit()
submit()
View(result3)
submit()
submit()
submit()
submit()
install.packages(p, quiet = TRUE)
install.packages("tidyr")
install.packages("readr")
switch()
swirl()
library(swirl)
swirl()
library(tidyr)
students
?gather
gather(students, sex, count, -grade)
students2
res <- gather(students2, sex_class, count, -grade)
res
?separate
separate(res, res$sex_class, c("sex", "class"), sep = "_")
separate(res, sex_class, c("sex", "class"), sep = "_")
separate(res, sex_class, c("sex", "class"))
submit()
students3
submit()
submit()
?spread
stocks <- data.frame(
time = as.Date('2009-01-01') + 0:9,
X = rnorm(10, 0, 1),
Y = rnorm(10, 0, 2),
Z = rnorm(10, 0, 4)
)
stocksm <- stocks %>% gather(stock, price, -time)
View(stocks)
View(stocksm)
stocksm %>% spread(stock, price) %>% View()
stocksm %>% spread(time, price) %>% View()
submit()
library(readr)
parse_number("class5")
?parse_number
?mutate
submit()
resultStd3 <- students3 %>%
gather(class, grade, class1:class5, na.rm = TRUE) %>%
spread(test, grade)
View(resultStd3)
mutate(resultStd3, class = parse_number(resultStd3$class))
submit()
reset()
swirl()
reset()
swirl()
?chaining
?chain
?%>%
?>
submit()
students4
submit()
submit()
submit()
passed
failed
passed <- mutate(passed, status = "passed")
failed <- mutate(failed, status = "failed")
bind_rows(passed,failed)
sat
submit()
?group_by
submit()
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv")
?download.file
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "ACS.csv")
ACS <- read.csv("ACS.csv")
View(ACS)
str(ACS)
View(ACS)
tbl_df(ACS) -> ACS
agricultureLogical <- (ACS$ACR > 10 & ACS$AGS == 6)
which(agricultureLogical)
agricultureLogical
which(agricultureLogical)
agricultureLogical <- (ACS$ACR = 3 & ACS$AGS == 6)
which(agricultureLogical)
ACS <- read.csv("ACS.csv")
agricultureLogical <- (ACS$ACR == 3 & ACS$AGS == 6)
which(agricultureLogical)
library(jpeg)
install.packages("jpeg")
library(jpeg)
?readJPEG
image <- readJPEG("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg", "jeff.jpg")
image <- readJPEG("jeff.jpg")
image <- readJPEG("jeff.jpg", native = TRUE)
?quantile
quantile(image, probs = c(0.3, 0.8))
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "GDP.csv")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "ED.csv")
GDP <- read.csv("GDP.csv")
ED <- read.csv("ED.csv")
View(ED)
View(GDP)
?merge
quiz3 <- merge(ED,GDP,by.x = "CountryCode", by.y = "X")
View(quiz3)
?match
match(ED$CountryCode,GDP$X)
length(match(ED$CountryCode,GDP$X))
View(GDP)
View(quiz3)
arrange(quiz3, Gross.domestic.product.2012)
quiz3_ordered <- arrange(quiz3, Gross.domestic.product.2012)
View(quiz3_ordered)
quiz3_num <- mutate(quiz3, Gross.domestic.product.2012 = as.integer(Gross.domestic.product.2012))
View(quiz3_num)
class(quiz3_num)
class(quiz3_num$Gross.domestic.product.2012)
quiz3_ordered <- arrange(quiz3, Gross.domestic.product.2012)
View(quiz3_ordered)
quiz3_ordered <- arrange(quiz3_num, Gross.domestic.product.2012)
View(quiz3_ordered)
View(quiz3_num)
View(quiz3)
class(quiz3$Gross.domestic.product.2012)
?as.numeric
?as.integer
quiz3$Gross.domestic.product.2012
as.numeric(quiz3$Gross.domestic.product.2012)
str(quiz3)
str(GDP)
quiz3_num <- mutate(quiz3, Gross.domestic.product.2012 = as.numeric(levels(Gross.domestic.product.2012)[Gross.domestic.product.2012]))
quiz3$Gross.domestic.product.2012
as.numeric(levels(Gross.domestic.product.2012))[Gross.domestic.product.2012]
as.numeric(levels(quiz3$Gross.domestic.product.2012))[quiz3$Gross.domestic.product.2012]
quiz3_num <- mutate(quiz3, Gross.domestic.product.2012 = as.numeric(levels(Gross.domestic.product.2012))[Gross.domestic.product.2012])
quiz3_ordered <- arrange(quiz3_num, Gross.domestic.product.2012)
quiz3_ordered <- arrange(quiz3_num, desc(Gross.domestic.product.2012))
View(quiz3_ordered)
quiz3_ordered[13,]
length(match(ED$CountryCode,GDP$X))
quiz3_grouped <- group_by(quiz3_ordered, Income.Group)
summarise(quiz3_grouped, average = average(Gross.domestic.product.2012))
summarise(quiz3_grouped, average = mean(Gross.domestic.product.2012))
?mean
summarise(quiz3_grouped, average = mean(Gross.domestic.product.2012, na.rm = T))
image <- readJPEG("jeff.jpg", native = TRUE)
quantile(image, probs = c(0.3, 0.8))
match(ED$CountryCode, GDP$X)
?match
?length
matched <- match(ED$CountryCode, GDP$X)
length(matched[!is.na(matched)])
matched[!is.na(matched)]
View(quiz3_ordered)
length(matched)
is.na(GDP$X)
GDP[GDP$X=="",X]
GDP[GDP$X=="","X"]
GDP[GDP$X!="","X"]
GDP <- GDP[GDP$X!="",]
ED[ED$CountryCode!="",]
ED[ED$CountryCode=="",]
ED[ED$CountryCode=="","CountryCode"]
matched <- match(ED$CountryCode, GDP$X)
length(matched)
matched
matched[!is.na(matched)]
View(GDP)
View(ED)
?quantile
quantile(GDP$Gross.domestic.product.2012, probs = c(0.2,0.4,0.6,0.8,1))
class(GDP$Gross.domestic.product.2012)
class(ED$CountryCode)
as.character(GDP$Gross.domestic.product.2012)
as.character(GDP$X)
GDP <- mutate(GDP, Gross.domesticproduct.2012 = as.character(Gross.domesticproduct.2012))
GDP <- mutate(GDP, Gross.domestic.product.2012 = as.character(Gross.domestic.product.2012))
View(GDP)
GDP <- mutate(GDP, Gross.domestic.product.2012 = as.numeric(Gross.domestic.product.2012))
GDP <- mutate(GDP, X = as.character(X))
View(GDP)
class(GDP$X)
class(ED$CountryCode)
ED <- mutate(ED, CountryCode = as.character(CountryCode))
matched <- match(ED$CountryCode, GDP$X)
matched
length(matched[!is.na(matched)])
breaks <- quantile(GDP$Gross.domestic.product.2012,seq(0, 1, 0.2))
breaks <- quantile(GDP$Gross.domestic.product.2012,seq(0, 1, 0.2), na.rm = T)
breaks
?cut
quiz3_ordered$quantile <- cut(quiz3_ordered$Gross.domestic.product.2012, breaks = breaks)
table(quiz3_ordered$Income.Group,quiz3_ordered$Gross.domestic.product.2012)
table(quiz3_ordered$Income.Group,quiz3_ordered$quantile)
rm(list = ls())
library(swirl)
swirl()
library(lubridate)
install.packages("lubridate")
library(lubridate)
swirl()
Sys.getlocale("LC_TIME")
Sys.setlocale("LC_TIME", "en_US.UTF-8")
Sys.setlocale("LC_TIME", "English")
Sys.setlocale("LC_TIME", "Spanish_Colombia")
swirl()
library(lubridate)
help(package = lubridate)
today()
this_day <- today()
this_day
yaer(this_day)
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
hour(this_moment)
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12 1975")
dmy("25081985")
dmy(25081985)
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 15, minutes = 35)
this_moment
?now
nyc <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Honk_Kong")
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008")
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
getwd()
mkdir("data-cleaning")
?directory
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv", "ACS.csv")
ACS <- read.csv("ACS.csv")
names(ACS)
?strsplit
names_split <- strsplit(names(ACS),"wgtp")
names_split[[123]]
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv", "GDP.csv")
?read.csv
GDP <- read.csv("GDP.csv")
View(GDP)
GDP <- GDP[5:195,]
GDP <- read.csv("GDP.csv")
GDP[!is.na(GDP$X.1),]
GDP[!is.na(GDP$X),]
GDP[is.na(GDP$X),]
GDP[!is.na(GDP$X) & GDP$X!="",]
GDP[!is.na(GDP$X) & GDP$X!="",1]
GDP_r <- GDP[!is.na(GDP$X) & GDP$X!="",]
GDP_r <- GDP_r[1:190,]
View(GDP_r)
?gsub
gsub(",",GDP_r$X.3)
gsub(",", "", GDP_r$X.3)
average(as.numeric(gsub(",", "", GDP_r$X.3)))
?average
?avg
library(dplyr)
?average
summmary(as.numeric(gsub(",", "", GDP_r$X.3)))
summary(as.numeric(gsub(",", "", GDP_r$X.3)))
mean(as.numeric(gsub(",", "", GDP_r$X.3)))
grep("^United",GDP_r$X.2)
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv", "FEDSTATS.csv")
FEDSTATS <- read.csv("FEDSTATS.csv")
View(FEDSTATS)
?merge
EDU <- merge(GDP_r, FEDSTATS, by.x = GDP_r$X, by.y = FEDSTATS$CountryCode)
EDU <- merge(GDP_r, FEDSTATS, by.x = GDP_r$X, by.y = FEDSTATS$CountryCode)
EDU <- merge(GDP_r, FEDSTATS, by.x = "X", by.y = "CountryCode")
View(EDU)
grep("Fiscal year end: [Jj]une",EDU$Special.Notes)
length(grep("Fiscal year end: [Jj]une",EDU$Special.Notes))
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
View(amzn)
sampleTimes
sampleTimeDate <- ymd(sampleTimes)
sampleTimeDate[year(sampleTimeDate) = 2012]
sampleTimeDate[year(sampleTimeDate) == 2012]
length(sampleTimeDate[year(sampleTimeDate) == 2012])
length(sampleTimeDate[year(sampleTimeDate) == 2012 & wday(sampleTimeDate) == 2])
rm(list = ls())
?read.csv
setwd("cleaning-data\Project\UCI HAR Dataset\")
setwd("cleaning-data/Project/UCI HAR Dataset")
ls()
list.files()
labels_train <- read.table("train/y_train.txt", header = F)
View(labels_train)
train <- read.table("train/X_train.txt", header = F, col.names = labels_train)
labels_train
class(labels_train)
class(labels_train$V1)
labels_train$V1
train <- read.table("train/X_train.txt", header = F, col.names = labels_train$V1)
train <- read.table("train/X_train.txt", header = F)
class(train)
View(train)
train_df <- cbind(labels_train,train)
View(train_df)
unique(labels_train$V1)
labels_train <- read.table("train/y_train.txt", header = F, col.names = c("trainLabel"))
train_df <- cbind(labels_train,train)
features <- read.table("features.txt", header = F)
train <- read.table("train/X_train.txt", header = F, col.names = features$V2)
train_df <- cbind(labels_train,train)
file.exists("feature.txt")
file.exists("features.txt")
?stop
if(!file.exists("features.txt"))
{
stop("The features file doesn't exist")
}
if(!file.exists(train/y_train.txt))
{
stop("The train labels file doesn't exist")
}
if(!file.exists(train/X_train.txt))
{
stop("The train data file doesn't exist")
}
features <- read.table("features.txt", header = F)
labels_train <- read.table("train/y_train.txt", header = F, col.names = c("trainLabel"))
train <- read.table("train/X_train.txt", header = F, col.names = features$V2)
train_df <- cbind(labels_train,train)
rm(labels_train, train)
if(!file.exists(test/y_tests.txt))
{
stop("The train labels file doesn't exist")
}
if(!file.exists(test/X_test.txt))
{
stop("The train data file doesn't exist")
}
labels_test <- read.table("test/y_test.txt", header = F, col.names = c("testLabel"))
test <- read.table("test/X_test.txt", header = F, col.names = features$V2)
test_df <- cbind(labels_test,test)
rm(labels_test, test)
?merge
merge(test_df,train_df)
size(train_df)
dim(merge(test_df,train_df))
dim(merge(test_df,train_df, all = T))
if(!file.exists("features.txt"))
{
stop("The features file doesn't exist")
}
if(!file.exists(train/y_train.txt))
{
stop("The train labels file doesn't exist")
}
if(!file.exists(train/X_train.txt))
{
stop("The train data file doesn't exist")
}
features <- read.table("features.txt", header = F)
labels_train <- read.table("train/y_train.txt", header = F, col.names = c("activityLabel"))
train <- read.table("train/X_train.txt", header = F, col.names = features$V2)
train_df <- cbind(labels_train,train)
rm(labels_train, train)
if(!file.exists(test/y_tests.txt))
{
stop("The train labels file doesn't exist")
}
if(!file.exists(test/X_test.txt))
{
stop("The train data file doesn't exist")
}
labels_test <- read.table("test/y_test.txt", header = F, col.names = c("activityLabel"))
test <- read.table("test/X_test.txt", header = F, col.names = features$V2)
test_df <- cbind(labels_test,test)
rm(labels_test, test, features)
join_df <- merge(test_df,train_df, all = T)
dim(join_df)
grep("mean|std",names(join_df))
?grep
grep("mean|std",names(join_df), ignore.case = T, value = T)
grep("mean|std",names(join_df), value = T)
extracted_df <- join_df[,grep("mean|std",names(join_df), ignore.case = T)]
?sub
?mutate
?sub
View(join_df)
extracted_df <- join_df[,c(1,grep("mean|std",names(join_df), ignore.case = T))]
class(extracted_df$activityLabel)
gsub(1, "WALKING", extracted_df$activityLabel)
result <- gsub(1, "WALKING", extracted_df$activityLabel)
View(WALKING)
View(result)
?mutate
extracted_df$activityLabel <- gsub(1, "WALKING", extracted_df$activityLabel)
View(extracted_df)
extracted_df$activityLabel <- gsub(2, "WALKING_UPSTAIRS", extracted_df$activityLabel)
activityLabels <- read.table("activity__labels.txt", header = F)
activityLabels <- read.table("activity_labels.txt", header = F)
View(activityLabels)
activityLabels$V1
activityLabels[,1]
activityLabels <- read.table("activity__labels.txt", header = F)
for (i in activityLabels[,1])
{
extracted_df$activityLabel <- gsub(i, activityLabels[activityLabels$V1==i,2], extracted_df$activityLabel)
}
View(extracted_df)
names(extracted_df)
View(names(extracted_df))
names(extracted_df)[2]
?group_by
grouped_df <- group_by(extracted_df, "activityLabel")
summarise(grouped_df)
View(grouped_df)
grouped_df <- group_by(extracted_df, activityLabel)
summarise(grouped_df)
summary(grouped_df)
mean(grouped_df)
?average
sub("..","-",names(extracted_df))
sub("/./.","-",names(extracted_df))
sub("/...","-",names(extracted_df))
sub("/././.","-",names(extracted_df))
sub("[•.,]{3}","-",names(extracted_df))
names(extracted_df) <- sub("[.,]{3}","-",names(extracted_df))
names(extracted_df) <- sub("[.,]{2}","",names(extracted_df))
names(extracted_df) <- sub("Body{2}","Body",names(extracted_df))
names(extracted_df)
sub("Body{2}","Body",names(extracted_df))
sub("BodyBody","Body",names(extracted_df))
names(extracted_df)[c(82,85,86,87)] <- c("angle.tBodyAccJerkMean.gravityMean","angle.gravityMean-X","angle.gravityMean-Y", "angle.gravityMean-Z")
names(extracted_df)
?summarise_at
summarise_at(extracted_df, funs(mean(.,na.rm = T)))
summarise_at(extracted_df, vars(), funs(mean(.,na.rm = T)))
summarise_at(extracted_df, vars(names(extracted_df)), funs(mean(.,na.rm = T)))
summarise_at(grouped_df, vars(names(grouped_df)), funs(mean(.,na.rm = T)))
grouped_df <- group_by(extracted_df, activityLabel)
summarise_at(grouped_df, vars(names(grouped_df)), funs(mean(.,na.rm = T)))
View(grouped_df)
class(names(grouped_df))
summarise_at(grouped_df, vars(1:length(grouped_df), funs(mean(.,na.rm = T)))
summarise_at(grouped_df, vars(1:length(grouped_df)), funs(mean(.,na.rm = T)))
summarise_at(grouped_df, vars(1:length(grouped_df)-1), funs(mean(.,na.rm = T)))
summarise_at(grouped_df, vars(), funs(mean(.,na.rm = T)))
aggregate(extracted_df[,2:dim(extracted_df)[2]], list(extracted_df$activityLabel), mean)
View(aggregate(extracted_df[,2:dim(extracted_df)[2]], list(extracted_df$activityLabel), mean))
View(summarise_at(grouped_df, vars(1:dim(grouped_df)[2]), funs(mean(.,na.rm = T))))
secondaryData <- aggregate(primaryData[,2:dim(primaryData)[2]], list(primaryData$activityLabel), mean)
names(secondaryData)[1] <- "activityLabel"
primaryData <- extracted_df
#Tidy data set with activity and subject average
secondaryData <- aggregate(primaryData[,2:dim(primaryData)[2]], list(primaryData$activityLabel), mean)
names(secondaryData)[1] <- "activityLabel"
primaryData <- extracted_df
rm(extracted_df,join_df,test_df,train_df)
#Tidy data set with activity and subject average
secondaryData <- aggregate(primaryData[,2:dim(primaryData)[2]], list(primaryData$activityLabel), mean)
names(secondaryData)[1] <- "activityLabel"
rm(grouped_df)
View(secondaryData)
View(names(primaryData))
